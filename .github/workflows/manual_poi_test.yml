# This is a basic .net build and test workflow that is manually triggered

name: Manual Test of POI API

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
# after testing change to
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
#     paths:
#           - 'apis/poi/**'
#use ${{ github.GITHUB_SHA }} instead of the manual suffix
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
env:
  scriptname: manual-poi-test
  acrname: openhack4zj1lt11acr.azurecr.io
  appname: openhack4zj1lt11poi
  resourcegroup: openhack4zj1lt11rg

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      env:
        NUGET_AUTH_TOKEN: ${{secrets.AZURE_OH_DEVOPS_PAT}}
      with:
        dotnet-version: 2.2.108
        source-url: https://pkgs.dev.azure.com/DemoCorpVeryLimited/_packaging/PackageFeed/nuget/v3/index.json
    - name: Restore dependencies
      run: dotnet restore
      working-directory: 'apis/poi/'
    - name: Build
      run: dotnet build --no-restore
      working-directory: 'apis/poi/'
    - name: Test
      run: dotnet test --no-build --verbosity normal
      working-directory: 'apis/poi/'
    - name: Create the package
      run: dotnet pack --configuration Release --version-suffix "${{ github.run_id }}-manual"
      working-directory: 'apis/poi/'
    # Publishing into azure artefacts is not really needed - as we're pushing the docker into ACR later on
    - name: Publish the package to Azure Artifacts
      run: dotnet nuget push -k "${{secrets.AZURE_OH_DEVOPS_PAT}}" web/bin/Release/*.nupkg 
      working-directory: 'apis/poi/'
    - name: Azure Login
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Run container build
      run: az acr build --image "devopsoh/${{ env.app_name }}:${{ github.run_id }}-manual" -t --image "devopsoh/${{ env.app_name }}:latest" --registry ${{ env.acrname }} --file Dockerfile .
      working-directory: 'apis/poi/web'
      
    - name: Process errors
      if: ${{ failure() }}
      run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/issues \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data '{
              "title": "${{ env.scriptname }} has failed: ${{ github.run_id }}",
              "body": "${{ env.scriptname }} has failed: **${{ github.workflow }}**. \n\n Failure in run: _${{ github.run_id }}_."
              }'
